================================================================================
üöÄ PARALLEL TESTING - QUICK START GUIDE
================================================================================

üìÅ Location: performance_testing/parallel_testing/

================================================================================
‚ö° QUICK RUN (30 second test)
================================================================================

cd /Users/shtlpmac_002/Downloads/nthScaling/performance_testing/parallel_testing
source ../../venv/bin/activate
locust -f locustfile_vector.py --users 10 --spawn-rate 2 --run-time 30s --headless

================================================================================
üî• FULL TEST SUITE (All 5 types, 5 minutes each)
================================================================================

cd /Users/shtlpmac_002/Downloads/nthScaling/performance_testing/parallel_testing
source ../../venv/bin/activate
./run_parallel_tests.sh

================================================================================
üéØ INDIVIDUAL TESTS
================================================================================

# Vector Search
locust -f locustfile_vector.py --users 100 --spawn-rate 5 --run-time 5m --headless

# BM25 Search
locust -f locustfile_bm25.py --users 100 --spawn-rate 5 --run-time 5m --headless

# Hybrid Alpha=0.1
locust -f locustfile_hybrid_01.py --users 100 --spawn-rate 5 --run-time 5m --headless

# Hybrid Alpha=0.9
locust -f locustfile_hybrid_09.py --users 100 --spawn-rate 5 --run-time 5m --headless

# Mixed
locust -f locustfile_mixed.py --users 100 --spawn-rate 5 --run-time 5m --headless

================================================================================
üìä COMPARISON WITH MULTI-COLLECTION
================================================================================

# 1. Run multi-collection (existing)
cd ../multi_collection
locust -f locustfile_vector.py --users 100 --run-time 5m --headless --html multi_vector.html

# 2. Run parallel (new)
cd ../parallel_testing
locust -f locustfile_vector.py --users 100 --run-time 5m --headless --html parallel_vector.html

# 3. Compare reports
open multi_vector.html parallel_vector.html

================================================================================
üîß REGENERATE QUERIES (if needed)
================================================================================

cd /Users/shtlpmac_002/Downloads/nthScaling/performance_testing/parallel_testing
source ../../venv/bin/activate
python generate_parallel_queries.py --search-types all --limits 10 50 100 150 200

================================================================================
‚úÖ VALIDATION
================================================================================

cd /Users/shtlpmac_002/Downloads/nthScaling/performance_testing/parallel_testing
source ../../venv/bin/activate
./quick_test.sh

================================================================================
üìö FILES OVERVIEW
================================================================================

generate_parallel_queries.py    ‚Üí Creates query files (uses cached embeddings)
locustfile_vector.py            ‚Üí Pure vector search (9 parallel requests)
locustfile_bm25.py              ‚Üí BM25 keyword search (9 parallel requests)
locustfile_hybrid_01.py         ‚Üí Hybrid Œ±=0.1 (9 parallel requests)
locustfile_hybrid_09.py         ‚Üí Hybrid Œ±=0.9 (9 parallel requests)
locustfile_mixed.py             ‚Üí Mixed search types (9 parallel requests)
run_parallel_tests.sh           ‚Üí Automated test runner (all 5 types)
quick_test.sh                   ‚Üí Validation script
queries/                        ‚Üí 25 query files (30 sets √ó 9 queries each)
README.md                       ‚Üí Comprehensive documentation
IMPLEMENTATION_SUMMARY.md       ‚Üí Technical details & implementation notes
QUICK_START.txt                 ‚Üí This file

================================================================================
üéØ WHAT'S DIFFERENT FROM MULTI-COLLECTION?
================================================================================

Multi-Collection Approach:
  ‚Ä¢ 1 GraphQL query with 9 sub-queries
  ‚Ä¢ Weaviate processes internally
  ‚Ä¢ Time = Sequential or optimized internal processing

Parallel Approach (THIS):
  ‚Ä¢ 9 separate HTTP requests sent simultaneously
  ‚Ä¢ Client-side parallelization using gevent
  ‚Ä¢ Time = max(slowest_collection) + HTTP overhead

Expected Result:
  ‚Ä¢ Parallel should be FASTER if bottleneck is slowest collection
  ‚Ä¢ Total time ‚âà SongLyrics response time (~800ms)
  ‚Ä¢ Speedup: 2-3x faster than multi-collection

================================================================================
üìä QUERIES GENERATED
================================================================================

Total Files: 25
Total Query Sets: 30 per file
Total Queries per Set: 9 (one per collection)

Breakdown:
  ‚Ä¢ Vector: 5 files (10, 50, 100, 150, 200 limits)
  ‚Ä¢ BM25: 5 files (10, 50, 100, 150, 200 limits)
  ‚Ä¢ Hybrid 0.1: 5 files (10, 50, 100, 150, 200 limits)
  ‚Ä¢ Hybrid 0.9: 5 files (10, 50, 100, 150, 200 limits)
  ‚Ä¢ Mixed: 5 files (10, 50, 100, 150, 200 limits)

Total Individual Queries: 30 √ó 9 √ó 25 = 6,750 queries!

================================================================================
üö® TROUBLESHOOTING
================================================================================

Problem: "No module named 'gevent'"
Solution: source ../../venv/bin/activate && pip install gevent

Problem: "embeddings_cache.json not found"
Solution: cd .. && python generate_all_queries.py --type multi --search-types vector

Problem: "All requests timing out"
Solution: Check Weaviate is running: curl http://20.161.96.75/v1/.well-known/ready

Problem: "Queries not loading"
Solution: python generate_parallel_queries.py --search-types all

================================================================================
üéì KEY CONCEPTS
================================================================================

Gevent Greenlets:
  ‚Ä¢ Async I/O for parallel HTTP requests
  ‚Ä¢ Lightweight (not OS threads)
  ‚Ä¢ Non-blocking network operations
  ‚Ä¢ Built-in Locust support

Parallel Execution:
  1. Pick random query set (30 options)
  2. Spawn 9 greenlets (one per collection)
  3. Send all 9 HTTP requests simultaneously
  4. Wait for ALL to complete (30s timeout)
  5. Report total time to Locust

Error Handling:
  ‚Ä¢ 30s timeout per parallel batch
  ‚Ä¢ Partial success tracking (e.g., 7/9 succeeded)
  ‚Ä¢ Per-collection error metrics
  ‚Ä¢ Graceful degradation

================================================================================
üìà METRICS TO TRACK
================================================================================

Response Time:
  ‚Ä¢ Average: Mean time for 9 parallel requests
  ‚Ä¢ Median: 50th percentile
  ‚Ä¢ 95th Percentile: 95% completed under X ms
  ‚Ä¢ Max: Slowest parallel batch

Throughput:
  ‚Ä¢ Requests/sec: Parallel batches per second
  ‚Ä¢ Success Rate: % of batches with all 9 successful

Per-Collection:
  ‚Ä¢ Individual response times
  ‚Ä¢ Failure rates per collection
  ‚Ä¢ Identify slow collections

================================================================================
‚úÖ READY TO TEST!
================================================================================

Start here:
  1. Validate setup: ./quick_test.sh
  2. Quick test (30s): locust -f locustfile_vector.py --users 10 --run-time 30s --headless
  3. Full suite: ./run_parallel_tests.sh

Good luck! üöÄ
================================================================================

